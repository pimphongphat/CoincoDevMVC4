@model Coinco.SMS.Website.Models.ServiceOrder
<div id="Address" class="fullViewforLargerHeightClass">  
  <div id="BillingAddress" class="leftAddressViewClass">
@{Html.Telerik().Grid((IEnumerable<Coinco.SMS.Website.Models.Address>)ViewData["BillingAddress"])
        .Name("BillingAddressGrid")
        .Columns(columns =>
        {
            columns.Bound(c => c.AddressDetails).Title("Billing Address").Width(180);
        })
                .DataBinding(dataBinding =>
                {
                    dataBinding.Ajax().OperationMode(GridOperationMode.Client).Select("_GetCustomerAddresses", "CheckIn")
                        .Enabled(true);
                }
        )
                 .Scrollable(c => c.Height("150px"))
        .Footer(false)
        .HtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;" })
       .Render();
    
        }
        </div>
   <div id="ShippingAddress" class="rightAddressViewClass">
         @{
             Html.Telerik().Grid((IEnumerable<Coinco.SMS.Website.Models.Address>)ViewData["ShippingAddress"])
        .Name("ShippingAddressGrid")
        .Columns(columns =>
        {
            columns.Template(@<text>


                    <input name="checkedRecords" type="checkbox"  checked="@item.IsSelected" value="@item.AddressId" title="checkedRecords"           
                     />
                </text>)
                   .ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= AddressId #>'  checked='<#= IsSelected #>' />")
                   .Title("")
                   .Width(36)
                   .HtmlAttributes(new { style = "text-align:center" });

            columns.Bound(c => c.AddressDetails).Title("Shipping Address").Width(180);
        })
                        .DataBinding(dataBinding =>
                        {
                            dataBinding.Ajax().OperationMode(GridOperationMode.Client).Select("_GetCustomerAddresses", "CheckIn")
                                                            .Enabled(true);
                            
                        }
        )
        .ClientEvents(events=> events.OnLoad("onLoad"))
         .Footer(false)
         .Selectable()
         .Scrollable(c => c.Height("150px"))
        .HtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;" })
        
       .Render();
        
        }
    </div>
 </div>
     <h6>Other Details</h6>
    <div id="OtherDetails" class="fullViewforMediumHeightClass">
    <div id="CustomerComments" class="leftViewClass"> 
        <div id="CustomerCommentLabel" class="leftView" >
            @Html.Label("Customer Comments", new { @class = "leftView" })
        </div>
        <div id="CustomerCommentTextBox" class="leftadjacentView">
  
            @Html.TextAreaFor(p => p.Comments, new { @class = "textAreaProperties", id = "customerCommentTextArea" }) 
         </div>
    </div>

    <div id="CustomerPO" class="rightViewClass"> 
        <div id="CustomerPOLabel" class="rightView" >
            @Html.Label("Customer PO", new { @class = "rightView" })
        </div>
        <div id="CustomerPOTextBox" class="rightadjacentView">
  
                 @Html.TextBoxFor(p => p.CustomerPO, new { @class = "textBoxProperties", id = "customerPOTextBox" }) 

        </div>
    </div>

        <div id="ServiceTechnician" class="rightViewClass"> 
        <div id="ServiceTechnicianLabel" class="rightView" >
            @Html.Label("Service Technician", new { @class = "rightView" })
        </div>
        <div id="ServiceTechnicianDropDown" class="rightadjacentView">
                @{
    Html.Telerik().ComboBox().Name("serviceTechnicianDropDownList")
        .BindTo((SelectList)ViewData["ServiceTechnicianList"])
        //.ClientEvents(e => e.OnOpen("onOpen"))
        .HtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;width:205px" })
        .DropDownHtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;" })
        .Render();
        }
        </div>
    </div>

     <div id="WOClassification" class="leftViewClass"> 
        <div id="WOClassificationLabel" class="leftView" >
            @Html.Label("WO Classification", new { @class = "leftView" })
        </div>
        <div id="WOClassificationDropDown" class="leftadjacentView">
            
             @{
    Html.Telerik().ComboBox().Name("woClassificationDropDownList")
        .BindTo((SelectList)ViewData["WOClassificationList"])
        //.ClientEvents(e => e.OnOpen("onOpen"))
        .HtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;width:205px" })
        .DropDownHtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;" })
        .Render();
        }
        </div>
    </div>

      <div id="ServiceResponsible" class="rightViewClass"> 
        <div id="ServiceResponsibleLabel" class="rightView" >
            @Html.Label("Service Responsible", new { @class = "rightView" })
        </div>
        <div id="ServiceResponsibleDropDown" class="rightadjacentView">
  
             @{
    Html.Telerik().ComboBox().Name("serviceResponsibleDropDownList")
        .BindTo((SelectList)ViewData["ServiceResponsibleList"])
        //.ClientEvents(e => e.OnOpen("onOpen"))
        .HtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;width:205px" })
        .DropDownHtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;" })
        .Render();
        }
        </div>
    </div>
    
    </div>
     <h6>Check In Data</h6>
        <div id="CheckInData" class="fullViewThreeColumnforSmallerHeightClass">
     <div id="SerialNumber" class="leftViewClassforThirdColumn"> 
        <div id="SerialNumberLabel" class="leftView" >
            @Html.Label("Serial Number", new { @class = "leftView" })
          
        </div>
        <div id="SerialNumberTextBox" class="leftadjacentView">

                 @Html.TextBox("serialNumberTextBox", "", new { @class = "textBoxProperties" }) 
           
        </div>
    </div>

       <div id="PartNumber" class="rightViewClassforThirdColumn"> 
        <div id="PartNumberLabel" class="rightView" >
            @Html.Label("Part Number", new { @class = "rightView" })
        </div>
        <div id="PartNumberDropDown" class="rightadjacentView">
  
       @{
    Html.Telerik().ComboBox().Name("partNumberDropDownList")
        .BindTo((SelectList)ViewData["PartNumberList"])
        //.ClientEvents(e => e.OnOpen("onOpen"))
        .HtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;width:205px" })
        .DropDownHtmlAttributes(new { style = "font-size: 8pt; font-family: Verdana;" })     
        .Render();
        }
        </div>
         <div id="AddButton" class="rightViewforThirdColumn" >
                    <button class="t-button" type="button" id="Add" value="Add">Add</button>

        </div>
    </div>
    </div>

    <script type="text/javascript">
        function onLoad() {
            $(this).find(':checkbox').click(function (e) {

                var $checkedRecords = $(':checked');
                $checkedRecords.each(function (index, domEle) {
                    // domEle == this
                    if ($checkedRecords[index].value != e.currentTarget.value) {
                        $checkedRecords[index].checked = false;
                    }

                });

                
                //handle the click event
            })
        }

        $(function () {
            $('#serialNumberTextBox').keydown(function (e) {
                if (e.keyCode == 13) {
                    var isSerialNumberExist = false;
                    var partNumber = $('#partNumberDropDownList').val();
                    var serialNumber = $('#serialNumberTextBox').val();
                    if (($.trim(serialNumber) == '') || (serialNumber == null)) {
                        alert('Please enter the serial number before adding a line.');
                        $('#serialNumberTextBox').addClass("input-validation-error");
                        $('#serialNumberTextBox').focus();
                        return;
                    }

                    $("#ServiceOrderLineGrid .t-grid-content tbody > tr").each(function () {
                        var tr = this;
                        var cells = tr.cells;
                        if (cells[2] != null) {
                            var firstCell = cells[2].innerHTML;
                            if (firstCell == serialNumber) {
                                alert('The entered serial number is already availble in the lines table. Please enter a different serial number.');
                                $('#serialNumberTextBox').focus();
                                isSerialNumberExist = true;
                                return;
                            }
                        }
                    });
                    if (isSerialNumberExist) {
                        return;
                    }
                    jQuery.ajax({
                        url: "/CheckIn/GetServiceOrderLinesHistoryBySerialNumberPartNumber",
                        type: 'POST',
                        data: { partNumber: partNumber, serialNumber: serialNumber },
                        success: function (result) {
                            jQuery('#ServiceOrderGridDiv').html(result);
                        },
                        error: function (result) {
                            alert(result.responseText);
                        }

                    });
                    return false;
                }
            });
        });
        jQuery('#Add').click(function () {
            var isSerialNumberExist = false;
            var partNumber = $('#partNumberDropDownList').val();
            var serialNumber = $('#serialNumberTextBox').val();
            if (($.trim(serialNumber) == '') || (serialNumber == null)) {
                alert('Please enter the serial number before adding a line.');
                $('#serialNumberTextBox').addClass("input-validation-error");
                $('#serialNumberTextBox').focus();
                return;
            }

            $("#ServiceOrderLineGrid .t-grid-content tbody > tr").each(function () {
                var tr = this;
                var cells = tr.cells;
                if (cells[2] != null) {
                    var firstCell = cells[2].innerHTML;
                    if (firstCell == serialNumber) {
                        alert('The entered serial number is already availble in the lines table. Please enter a different serial number.');
                        $('#serialNumberTextBox').focus();
                        isSerialNumberExist = true;
                        return;
                    }
                }
            });
            if (isSerialNumberExist)
            {
            return;
            }
            jQuery.ajax({
                url: "/CheckIn/GetServiceOrderLinesHistoryBySerialNumberPartNumber",
                type: 'POST',
                data: { partNumber: partNumber, serialNumber: serialNumber },
                success: function (result) {
                    jQuery('#ServiceOrderGridDiv').html(result);
                },
                error: function (result) {
                    alert(result.responseText);
                }

            });
            return false;
        });

        function displayCheckedOrders() {
            var $checkedRecords = $(':checked');

            if ($checkedRecords.length < 1) {
                alert('Check a few grid rows first.');
                return;
            }

            //            $('#result').load('<%= Url.Action("DisplayCheckedOrders", "Grid")
            //                %>', $checkedRecords);
        }

        
        jQuery('#serialNumberTextBox').keyup(function () {
            $('#serialNumberTextBox').removeClass("input-validation-error");
        });

        function onDataBinding(e) {
            SomethingGroupGrid_RowSelect(e);
            e.data = $.extend(e.data, { addressId: addressId });
        }
    </script>